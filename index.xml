<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overview on Magic Modules</title><link>https://googlecloudplatform.github.io/magic-modules/</link><description>Recent content in Overview on Magic Modules</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://googlecloudplatform.github.io/magic-modules/index.xml" rel="self" type="application/rss+xml"/><item><title>Add resource tests</title><link>https://googlecloudplatform.github.io/magic-modules/develop/test/test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/test/test/</guid><description>Add resource tests # This page describes how to add tests to a new resource in the google or google-beta Terraform provider.
For more information about testing, see the official Terraform documentation.
Before you begin # Determine whether your resources is using MMv1 generation or handwritten. If you are not adding tests to an in-progress PR, ensure that your magic-modules, terraform-provider-google, and terraform-provider-google-beta repositories are up to date. cd ~/magic-modules git checkout main &amp;amp;&amp;amp; git clean -f .</description></item><item><title>Create a pull request</title><link>https://googlecloudplatform.github.io/magic-modules/contribute/create-pr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/contribute/create-pr/</guid><description>Create a pull request (PR) # Requirements # Make sure your branch contains a single self-contained change. For example: If you are adding multiple resources to the provider, only put one resource in each PR - even if the product requires all resources to be present before it can be meaningfully used. If you are adding a few fields and also fixing a bug, create one PR for adding the new fields and a separate PR for the bugs.</description></item><item><title>Generate the providers</title><link>https://googlecloudplatform.github.io/magic-modules/get-started/generate-providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/get-started/generate-providers/</guid><description>Generate google and google-beta providers # This quickstart guides you through setting up your development environment, making a change to magic-modules, generating provider changes to the google and google-beta Terraform providers, and running tests related to the change.
Before you begin # Install the gcloud CLI. In the Google Cloud console, on the project selector page, select or create a Google Cloud project. Note: If you don&amp;rsquo;t already have a project to use for testing changes to the Terraform providers, create a project instead of selecting an existing poject.</description></item><item><title>make commands</title><link>https://googlecloudplatform.github.io/magic-modules/reference/make-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/reference/make-commands/</guid><description>make commands reference # magic-modules # make / make provider # Generates the code for the downstream google and google-beta providers.
Note: Generation works best if the downstream provider has a commit checked out corresponding to the latest main branch commit that is present in your magic-modules working branch. This can generally be identified based on matching commit messages. Examples:
make provider VERSION=ga OUTPUT_PATH=&amp;#34;$GOPATH/src/github.com/hashicorp/terraform-provider-google&amp;#34; make provider VERSION=beta OUTPUT_PATH=&amp;#34;$GOPATH/src/github.com/hashicorp/terraform-provider-google-beta&amp;#34; # Only generate a specific product (plus all common files) make provider VERSION=ga OUTPUT_PATH=&amp;#34;$GOPATH/src/github.</description></item><item><title>Types of breaking changes</title><link>https://googlecloudplatform.github.io/magic-modules/develop/breaking-changes/breaking-changes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/breaking-changes/breaking-changes/</guid><description>Types of breaking changes # A &amp;ldquo;breaking change&amp;rdquo; is any change that requires an end user to modify a previously-valid configuration after a provider upgrade. In this context, a &amp;ldquo;valid configuration&amp;rdquo; is one that:
Is considered syntactically correct by terraform validate Does not return an error during terraform apply Creates, updates, deletes, or does not modify resources Only manages resources that have not been altered with other tools, such as gcloud or Cloud Console.</description></item><item><title>How Magic Modules works</title><link>https://googlecloudplatform.github.io/magic-modules/get-started/how-magic-modules-works/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/get-started/how-magic-modules-works/</guid><description>How Magic Modules works # Magic Modules can be thought of as a source of truth for how to map a GCP API resource representation to a Terraform resource (or datasource) representation. Magic Modules uses that mapping (and additional handwritten code where necessary) to generate &amp;ldquo;downstream&amp;rdquo; repositories - in particular, the Terraform providers for Google Cloud: google (or TPG) and google-beta (or TPGB).
Generation of the downstream repositories happens for every new commit in a PR (to a temporary branch owned by the modular-magician robot user) and on every merge into the main branch (to the main branch of downstreams).</description></item><item><title>Make a breaking change</title><link>https://googlecloudplatform.github.io/magic-modules/develop/breaking-changes/make-a-breaking-change/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/breaking-changes/make-a-breaking-change/</guid><description>Guidance on making a breaking changes</description></item><item><title>Run tests</title><link>https://googlecloudplatform.github.io/magic-modules/develop/test/run-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/test/run-tests/</guid><description>Run tests # Before you begin # Generate the modified provider(s)
Set up application default credentials for Terraform
gcloud auth application-default login export GOOGLE_USE_DEFAULT_CREDENTIALS=true Set the following environment variables:
export GOOGLE_PROJECT=PROJECT_ID export GOOGLE_REGION=us-central1 export GOOGLE_ZONE=us-central1-a Replace PROJECT_ID with the ID of the Google Cloud project you are using for testing.
Optional: Some tests may require additional variables to be set, such as:
GOOGLE_ORG GOOGLE_BILLING_ACCOUNT Run automated tests # GA Provider Run unit tests and linters</description></item><item><title>Write release notes</title><link>https://googlecloudplatform.github.io/magic-modules/contribute/release-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/contribute/release-notes/</guid><description>Write release notes # This guide explains best practices for composing accurate, end-user focused release notes for Magic Modules pull requests.
Every pull request must have at least one release note block in the opening comment. Release note blocks have the following format:
```release-note:TYPE CONTENT ``` Replace TYPE with the correct release note type, and CONTENT with a release note written according to the guidelines in the following sections.</description></item><item><title>Add or modify a resource</title><link>https://googlecloudplatform.github.io/magic-modules/develop/resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/resource/</guid><description>Add or modify a resource # This page describes how to add a new resource to the google or google-beta Terraform provider using MMv1 and/or handwritten code.
For more information about types of resources and the generation process overall, see How Magic Modules works.
Before you begin # Complete the Generate the providers quickstart to set up your environment and your Google Cloud project. Ensure that your magic-modules, terraform-provider-google, and terraform-provider-google-beta repositories are up to date.</description></item><item><title>Review a pull request</title><link>https://googlecloudplatform.github.io/magic-modules/contribute/review-pr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/contribute/review-pr/</guid><description>Review a pull request # This page provides guidelines for reviewing a Magic Modules pull request (PR).
Read the PR description to understand the context and ensure the PR either is linked to a GitHub issue or an internal bug if not, check the issue tracker to see whether the feature has already been requested and add the issues in the description, if any. establishes clear context itself via title or description.</description></item><item><title>MMv1 field reference</title><link>https://googlecloudplatform.github.io/magic-modules/develop/field-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/field-reference/</guid><description>MMv1 field reference # This page documents commonly-used properties for fields. For a full list of available properties, see type.rb â†—.
Shared properties # min_version: beta # Marks the field (and any subfields) as beta-only. Ensure a beta version block is present in provider.yaml. Do not use if an ancestor field (or the overall resource) is already marked as beta-only.
immutable # If true, the field (and any subfields) are considered immutable - that is, only settable on create.</description></item><item><title>MMv1 resource reference</title><link>https://googlecloudplatform.github.io/magic-modules/develop/resource-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/resource-reference/</guid><description>MMv1 resource reference # This page documents commonly-used properties for resources. For a full list of available properties, see resource.rb â†—.
Basic # name # API resource name.
description # Resource description. Used in documentation.
Example:
description: | This is a multi-line description of a resource. references # Links to reference documentation for a resource. Contains two attributes:
guides: Link to quickstart in the API&amp;rsquo;s Guides section api: Link to the REST API reference for the resource Example:</description></item><item><title>Add custom resource code</title><link>https://googlecloudplatform.github.io/magic-modules/develop/custom-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/custom-code/</guid><description>Add custom resource code # This document covers how to add &amp;ldquo;custom code&amp;rdquo; to MMv1 resources. Custom code can be used to add arbitrary logic to a resource while still generating most of the code; it allows for a balance between maintainability and supporting real-worlds APIs that deviate from what MMv1 can support. Custom code should only be added if the desired behavior can&amp;rsquo;t be achieved otherwise.
Most custom code attributes are strings that contain a path to a template file relative to the mmv1 directory.</description></item><item><title>Add a datasource</title><link>https://googlecloudplatform.github.io/magic-modules/develop/add-handwritten-datasource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/add-handwritten-datasource/</guid><description>Datasources are like terraform resources except they don&amp;rsquo;t &lt;em>create&lt;/em> anything.</description></item><item><title>Contribution process</title><link>https://googlecloudplatform.github.io/magic-modules/get-started/contribution-process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/get-started/contribution-process/</guid><description>Contribution process # Before you begin # Familiarize yourself with GitHub flow Fork the Magic Modules repository into your GitHub account Set up your development environment Check whether the feature you want to work on has already been requested in the issue tracker. If there&amp;rsquo;s an issue and it already has a dedicated assignee, this indicates that someone might have already started to work on a solution. Otherwise, you&amp;rsquo;re welcome to work on the issue.</description></item><item><title>Promote to GA</title><link>https://googlecloudplatform.github.io/magic-modules/develop/promote-to-ga/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/promote-to-ga/</guid><description>Promote from beta to GA # This document describes how to promote an existing resource or field that uses MMv1 and/or handwritten code from the google-beta provider to the google (also known as &amp;ldquo;GA&amp;rdquo;) provider.
Handwritten code (including custom_code) commonly uses &amp;ldquo;version guards&amp;rdquo; in the form of &amp;lt;% unless version == 'ga' -%&amp;gt;...&amp;lt;% end -%&amp;gt; to wrap code that is beta-specific, which need to be removed during promotion.
For more information about types of resources and the generation process overall, see How Magic Modules works.</description></item><item><title>Fix a permadiff</title><link>https://googlecloudplatform.github.io/magic-modules/develop/permadiff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/permadiff/</guid><description>Fix a permadiff # Permadiffs are an extremely common class of errors that users experience. They manifest as diffs at plan time on fields that a user has not modified in their configuration. They can also show up as test failures with the error message: &amp;ldquo;After applying this test step, the plan was not empty.&amp;rdquo;
In a general sense, permadiffs are caused by the API returning a different value for the field than what the user sent, which causes Terraform to try to re-send the same request, which gets the same response, which continues to result in the user seeing a diff.</description></item><item><title>Handwritten docs style guide</title><link>https://googlecloudplatform.github.io/magic-modules/develop/handwritten-docs-style-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/develop/handwritten-docs-style-guide/</guid><description>Handwritten documentation style guide # This document describes the style guide for handwritten documentation for resources and data sources. MMv1-based resources will automatically generate documentation that matches this style guide.
File name and location # Handwritten documentation lives in:
Data sources: magic-modules/third_party/terraform/website/docs/d/ Resources: magic-modules/third_party/terraform/website/docs/r/ The name of the file is the name of the resource without a google_ prefix. For example, for google_compute_instance, the file is called compute_instance.html.markdown
YAML frontmatter # Every resource or datasource documentation page must include YAML frontmatter which sets subcategory (where the page will be displayed in the left sidebar).</description></item></channel></rss>